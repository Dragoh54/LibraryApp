// <auto-generated />
using System;
using LibraryApp.DomainModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryApp.DataAccess.Migrations
{
    [DbContext(typeof(LibraryAppDbContext))]
    [Migration("20241229223750_initialWithSeed")]
    partial class initialWithSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Entities.Models.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Surname")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("baca402e-d45d-461a-bd80-4661057bcc7a"),
                            BirthDate = new DateTime(1892, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Country = "United Kingdom",
                            Surname = "Tolkien"
                        },
                        new
                        {
                            Id = new Guid("eda3a697-7301-4a55-898c-abdf7419e9e8"),
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Country = "United Kingdom",
                            Surname = "Rowling"
                        },
                        new
                        {
                            Id = new Guid("41030ea2-ab9c-417e-a926-59e4b0f895de"),
                            BirthDate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Country = "United States",
                            Surname = "Martin"
                        },
                        new
                        {
                            Id = new Guid("ce968f77-3e8f-46f7-a500-2c665e470718"),
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Country = "United Kingdom",
                            Surname = "Orwell"
                        },
                        new
                        {
                            Id = new Guid("2131a841-f799-4f91-abef-6790014f5b66"),
                            BirthDate = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Country = "United Kingdom",
                            Surname = "Austen"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ReturnBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TakenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d05602-f3cf-41f5-953f-1f80ca913b6a"),
                            AuthorId = new Guid("baca402e-d45d-461a-bd80-4661057bcc7a"),
                            Description = "A fantasy novel by J.R.R. Tolkien.",
                            Genre = "Fantasy",
                            ISBN = "978-0261103573",
                            ReturnBy = new DateTime(2025, 1, 18, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8069),
                            TakenAt = new DateTime(2024, 12, 19, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8065),
                            Title = "The Hobbit",
                            UserId = new Guid("7f77794a-1409-4281-abea-7ba9995a6c07")
                        },
                        new
                        {
                            Id = new Guid("ad4e9ec3-adaf-46d9-9c00-6ce7911cd786"),
                            AuthorId = new Guid("eda3a697-7301-4a55-898c-abdf7419e9e8"),
                            Description = "The first book in the Harry Potter series by J.K. Rowling.",
                            Genre = "Fantasy",
                            ISBN = "978-0747532743",
                            ReturnBy = new DateTime(2025, 1, 13, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8076),
                            TakenAt = new DateTime(2024, 12, 24, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8075),
                            Title = "Harry Potter and the Philosopher's Stone",
                            UserId = new Guid("7f77794a-1409-4281-abea-7ba9995a6c07")
                        },
                        new
                        {
                            Id = new Guid("1423397e-3ca8-4164-b479-ae1fec105185"),
                            AuthorId = new Guid("41030ea2-ab9c-417e-a926-59e4b0f895de"),
                            Description = "The first book in the A Song of Ice and Fire series by George R.R. Martin.",
                            Genre = "Fantasy",
                            ISBN = "978-0553103540",
                            ReturnBy = new DateTime(2025, 1, 3, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8111),
                            TakenAt = new DateTime(2024, 12, 9, 22, 37, 50, 260, DateTimeKind.Utc).AddTicks(8110),
                            Title = "A Game of Thrones",
                            UserId = new Guid("91aabcf3-662b-41e1-a6ed-312496c55940")
                        },
                        new
                        {
                            Id = new Guid("658b45b5-f562-4760-b26a-20fc95ba744a"),
                            AuthorId = new Guid("ce968f77-3e8f-46f7-a500-2c665e470718"),
                            Description = "A dystopian novel by George Orwell.",
                            Genre = "Dystopian",
                            ISBN = "978-0451524935",
                            ReturnBy = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TakenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "1984"
                        },
                        new
                        {
                            Id = new Guid("373ccaf8-9151-4a40-9657-647eb0ab7e13"),
                            AuthorId = new Guid("2131a841-f799-4f91-abef-6790014f5b66"),
                            Description = "A classic novel by Jane Austen.",
                            Genre = "Classic",
                            ISBN = "978-0141439518",
                            ReturnBy = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TakenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("dba2fcaa-7302-497a-a3cc-c5efbb6f2ae9"),
                            AuthorId = new Guid("baca402e-d45d-461a-bd80-4661057bcc7a"),
                            Description = "An epic high-fantasy novel by J.R.R. Tolkien.",
                            Genre = "Fantasy",
                            ISBN = "978-0261102385",
                            ReturnBy = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TakenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = new Guid("e4a8e749-7e9c-4637-977c-add712f999db"),
                            AuthorId = new Guid("eda3a697-7301-4a55-898c-abdf7419e9e8"),
                            Description = "The sixth book in the Harry Potter series by J.K. Rowling.",
                            Genre = "Fantasy",
                            ISBN = "978-0747581086",
                            ReturnBy = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TakenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Half-Blood Prince"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WhenUsed")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f77794a-1409-4281-abea-7ba9995a6c07"),
                            Email = "booklover123@example.com",
                            Nickname = "booklover123",
                            PasswordHash = "$2a$11$OU0YC58MwgjsyeJkx9MzDOTzFvxNJAaCVmwxfzFta3m4ZkSR/Jili",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("dd47b691-3910-48a7-b76d-f67602195752"),
                            Email = "admin@example.com",
                            Nickname = "adminuser",
                            PasswordHash = "$2a$11$rYWcqxJlCbKbMcSRhwB1..um354tOhZ3mRetzXj43tLyj6AU97uoO",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("91aabcf3-662b-41e1-a6ed-312496c55940"),
                            Email = "fan@example.com",
                            Nickname = "literaturefan",
                            PasswordHash = "$2a$11$MMAXtpHuGJw0Opl2N8Ws7.vPzTYRf2Dptjc1U8zrpdlWNzJJTZoYy",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("38a861d3-919e-4934-a6f0-27e28fb1fff4"),
                            Email = "historybuff@example.com",
                            Nickname = "historybuff",
                            PasswordHash = "$2a$11$JVf9op3AIrqSFW8Jw3i2GuTAN7prWd3mjKiqj8nZl3B7RTmBduRO6",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("3fb45498-0311-4ed6-85be-333656ed177a"),
                            Email = "sciencegeek@example.com",
                            Nickname = "sciencegeek",
                            PasswordHash = "$2a$11$x8GcliIGZ63TvuCKS.iPgeXsXwhIp0Q9uaXpA8FPhsfhlKtfft.s.",
                            Role = 1
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.BookEntity", b =>
                {
                    b.HasOne("LibraryApp.Entities.Models.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Entities.Models.UserEntity", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryApp.Entities.Models.UserEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
